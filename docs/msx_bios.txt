[MSX-BIOS List]
0000 : MAIN : BIOS : CHKRAM
RAM을 확인하고 시스템의 RAM 슬롯 세트. 즉, 소프트웨어 리셋이다.
입력 /없이 출력 / 없음 BIOS에서 사용 / ALL

0008 : MAIN : BIOS : SYNCHR
(HL)의 1 문자가 지정된 문자를 확인한다. 다른면 Syntax error를 내고 맞는 있으면 0010H에.
입력 / HL = 체크하는 문자의 주소.

000C : MAIN : BIOS : RDSLT
A 슬롯의 주소 (HL)에서 1 바이트 읽어 들인다. 인터럽트는 금지 된 채 돌아온다.
입력 / A = 슬롯 HL = 읽기 주소

0010 : MAIN : BIOS : CHRGTB
BASIC 텍스트에서 문자 (또는 토큰)를 꺼낸다.
입력 / HL
출력 / HL = 다음 문자에 대한 포인터 A = 꺼낸 문자 숫자의 경우 C 플래그 명령문 종료시 Z 후라구が立つ
BIOS에서 사용 / AF, HL

0014 : MAIN : BIOS : WRSLT
A 슬롯의 주소 (HL)에 E의 1 바이트를 쓴다. 인터럽트는 금지 된 채 돌아온다.
입력 / A = 슬롯 HL = 읽기 주소, E = 쓰기 데이터

0018 : MAIN : BIOS : OUTDO
현재 사용하고있는 장치에 A 레지스터의 내용을 출력.
입력 / A = 출력 문자 출력 / 없음 BIOS에서 사용 / 없음

001C : MAIN : BIOS : CALSLT
IY의 상위 8 비트에서 지정된 슬롯 (IX)를 호출한다.
출력 / 호출 한 루틴에 의한 BIOS에서 사용 / 호출 한 루틴에 의한

0020 : MAIN : BIOS : DCOMPR
HL과 DE의 내용을 비교한다.
출력 / HL = DE라면 Z 플래그, HL0 : 낸다 출력 / 없음 BIOS에서 사용 / AF

0135 : MAIN : BIOS : CHGSND
1bit 사운드 포트의 상태를 바꾼다.
입력 / A = 0 : OFF A = ​​1 : ON 출력 / 없음 BIOS에서 사용 / AF

0138 : MAIN : BIOS :
기본 슬롯 레지스터에 출력되는 값을 A로 읽어옵니다.
입력 /없이 출력 / A = 기본 슬롯 레지스터의 값 BIOS에서 사용 / A

013B : MAIN : BIOS :
기본 슬롯 레지스터 A를 쓴다.
입력 / A = 기록 내용 출력 / 없음 BIOS에서 사용 / 없음

013E : MAIN : BIOS : RDVDP
VDP의 상태 레지스터 0을 A로 읽습니다.
입력 /없이 출력 / A = 상태 레지스터 0의 내용 BIOS에서 사용 / A

0141 : MAIN : BIOS : SNSMAT
키보드 매트릭스에서 A에서 지정한 행을 A로 얻는다.
입력 / A = 조사 키보드 매트릭스의 행 출력 / 키보드 매트릭스의 상태 BIOS에서 사용 / AF, C      

0144 : MAIN : BIOS : PHYDIO
디스크의 섹터 단위로 읽고.
입력 / Cy = 1 : 쓰기 0 : 읽기 A = 드라이브 번호 (0 : A 1 : B ...) B = 섹터 C = 미디어 ID DE = 대상의 첫 번째 섹터 번호 HL = DTA (기록 내용, read 처) 주소 출력 / Cy = 0 : 성공 1 : 실패 A = 오류 코드 B = 읽기 (쓰기) 남겨 섹터

0147 : MAIN : BIOS : FORMAT
디스크를 포맷한다.

014A : MAIN : BIOS :
장치가 작동하는지 확인한다.
입력 /없이 출력 / A <> 0이면, 실행중인 BIOS에서 사용 / AF  

014D : MAIN : BIOS :
A의 문자를 프린터로 출력한다.
입력 / A = 출력하는 문자 출력 / 없음 BIOS에서 사용 / F

0156 : MAIN : BIOS : KILBUF
키보드 버퍼를 지 웁니다.
입력 /없이 출력 / 없음 BIOS에서 사용 / HL

0159 : MAIN : BIOS : CALBAS
BASIC 인터프리터의 루틴을 인터 슬롯 호출한다.
입력 / IX = 호출하는 주소 출력 / 루틴에 의한 BIOS에서 사용 / 루틴에 의한 

015C : MAIN : BIOS : SUBROM
SUB-ROM 인터 슬롯 호출한다.
입력 / IX = 호출 주소 동시에 IX를 스택에 쌓는다

015F : MAIN : BIOS : EXTROM
SUB-ROM 인터 슬롯 호출한다.
입력 / IX = 호출하는 주소 출력 / 루틴에 의한 BIOS에서 사용 / IY 뒷면 이외

0168 : MAIN : BIOS : EOL
행의 끝까지 문자를 리트한다.
입력 / H = X 좌표 L = Y 좌표 출력 / 없음 BIOS에서 사용 / ALL

016B : MAIN : BIOS : BIGFIL
VRAM (HL)에서 BC 바이트를 A로 채운다. 화면 모드의 체크를하지 않는다.
입력 / HL = 쓰기 시작 주소 BC = 기입하는 바이트 수 A = 기록 데이터 출력 / 없음 BIOS에서 사용 / AF, BC 

016E : MAIN : BIOS : NSETRD
VDP에 주소 HL을 설정하고 읽을 수있는 상태로한다. VRAM의 주소는 모든 비트가 유효.
입력 / HL = 읽기 시작 주소 출력 / 없음 BIOS에서 사용 / AF

0171 : MAIN : BIOS : NSTWRT
VDP에 주소 HL을 설정하고 쓸 상태로한다. VRAM의 주소는 모든 비트가 유효.
입력 / HL = 쓰기 시작 주소 출력 / 없음 BIOS에서 사용 / AF

0174 : MAIN : BIOS : NRDVRM
VRAM의 (HL)을 A로 읽습니다. VRAM의 주소는 모든 비트가 유효.
입력 / HL = VRAM 읽기 주소 출력 / A = 읽은 데이터 BIOS에서 사용 / F

0177 : MAIN : BIOS : NWRVRM
A를 VRAM (HL)에 기록합니다. VRAM의 주소는 모든 비트가 유효.
입력 / A = 기록 데이터 HL = 기록 VRAM 주소 출력 / 없음 BIOS에서 사용 / AF

017A : MAIN : BIOS : RDRES
재설정 상태를 조사한다. (2+)
입력 /없이 출력 / A = Bit7 : 리셋 상태 (0 : 하드웨어 1 : 소프트웨어) BIOS에서 사용 / 없음

017A : MAIN : BIOS : WRRES
재설정 상태를 기록한다. (2+) BIOS 017AH에서 얻은 재설정 상태에 80H에서 OR을 취하고 나서이 BIOS에서 쓰기, 그리고 0 번지 점프 재설정한다.
입력 / A = 리셋 상태 출력 / 없음 BIOS에서 사용 / 없음

0180 : MAIN : BIOS : CHGCPU
A의 값은 CPU를 전환합니다. (TR Only)
입력 / A의 비트 7 = LED의 변화 A의 비트 1,0 = 0,0 : Z80 0,1 : R800-ROM 1,0 : R800-DRAM 출력 / 없음 BIOS에서 사용 / AF

0183 : MAIN : BIOS : GETCPU
동작중인 CPU의 종류를 A에 획득. (TR Only)
입력 /없이 출력 / A = 0 : Z80 1 : R800-ROM 2 : R800-DRAM BIOS에서 사용 / F 

0186 : MAIN : BIOS : PCMPLY
PCM 음성 재생. (TR Only)
입력 / A = Bit7 : 데이터의 소재 (0-Main RAM 1-VRAM) Bit1,0 : 0,0-15.75kHz 0,1-7.875kHz 1,0-5.25kHz 1,1-3.9375kHz EHL = 데이터 시작 번지 DBC = 데이터의 길이 (바이트) 출력 / Cy = 0 : 성공 Cy = 1 : 비정상적으로 종료 A : 이상 원인 (0 : 주파수 지정 오류 1 : CTRL-STOP 의한 중단) EHL : 중단 번지 BIOS에서 사용 / ALL

0189 : MAIN : BIOS : PCMREC
PCM 음성 기록. (TR Only)
입력 / A = Bit7 : 데이터의 소재 (0-Main RAM 1-VRAM) Bit6-3 : 트리거 레벨 Bit2 : 데이터 압축 여부 (0 : 없음 1 : 있음) Bit1,0 : 0,0-15.75kHz 0 1-7.875kHz 1,0-5.25kHz 1,1-3.9375kHz EHL = 데이터의 시작 번지 DBC = 데이터의 길이 (바이트) 출력 / Cy = 0 : 성공 Cy = 1 : 비정상적으로 종료 A : 이상 원인 (0 : 주파수 지정 오류 1 : CTRL-STOP 의한 중단) EHL : 중단 번지 BIOS에서 사용 / ALL

0085 : SUB : DOLINE
  선 쓰기
입력 / (BC, DE) - ((FCB3H) (FCB5H)) (F3F2H) (FB02H)

0089 : SUB : BIOS : GRPPRT
그래픽 화면에 문자 A를 표시합니다.
입력 / A = 문자 출력 / 없음 BIOS에서 사용 / 없음

00C9 : SUB : BIOS : NVBXLN
상자를 그린다.
입력 / (BC, DE) - ((FCB3H) (FCB5H)) (F3F2H) (FB02H)

00CD : SUB : BIOS : NVBXFL
채워진 상자를 그린다.
입력 / (BC, DE) - ((FCB3H) (FCB5H)) (F3F2H) (FB02H)

00D1 : SUB : BIOS : CHGMOD
스크린 모드를 A로 바꾼다.
입력 / A = 화면 모드 출력 / 없음 BIOS에서 사용 / ALL

00D5 : SUB : BIOS : INITXT
화면을 텍스트 모드 (Screen 0,40 * 24)에 초기화.
입력 /없이 출력 / 없음 BIOS에서 사용 / ALL

00D9 : SUB : BIOS : INIT32
화면을 텍스트 모드 (Screen 1,32 * 24)에 초기화.
입력 /없이 출력 / 없음 BIOS에서 사용 / ALL

00DD : SUB : BIOS : INIGRP
화면을 고해상도 모드 (Screen 2)에 초기화.
입력 /없이 출력 / 없음 BIOS에서 사용 / ALL

00E1 : SUB : BIOS : INIMLT
화면을 멀티 컬러 모드 (Screen 3)에 초기화.
입력 /없이 출력 / 없음 BIOS에서 사용 / ALL

00E5 : SUB : BIOS : SETTXT
VDP를 텍스트 모드 (Screen 0,40 * 24)한다.
입력 /없이 출력 / 없음 BIOS에서 사용 / ALL

00E9 : SUB : BIOS : SETT32
VDP를 텍스트 모드 (Screen 1,32 * 24)한다.
입력 /없이 출력 / 없음 BIOS에서 사용 / ALL

00ED : SUB : BIOS : SETGRP
VDP을 고해상도 모드 (Screen 2)한다.
입력 /없이 출력 / 없음 BIOS에서 사용 / ALL

00F1 : SUB : BIOS : SETMLT
VDP를 멀티 컬러 모드 (Screen 3)한다.
입력 /없이 출력 / 없음 BIOS에서 사용 / ALL

00F5 : SUB : BIOS : CLRSPR
모든 스프라이트를 초기화한다.
입력 / (FCAFH) 스크린 모드 출력 / 없음 BIOS에서 사용 / ALL  

00F9 : SUB : BIOS : CALPAT
A의 스프라이트 발전기 테이블의 주소를 HL 얻는다.
입력 / A = 스프라이트 번호 / HL = 스프라이트 발전기 테이블의 주소 BIOS에서 사용 / AF, DE, HL

00FD : SUB : BIOS : CALATR
A의 스프라이트 속성 테이블의 주소를 HL에 넣는다.
입력 / A = 스프라이트면 번호 출력 / HL = 스프라이트 속성 테이블의 주소 BIOS에서 사용 / AF, DE, HL

0101 : SUB : BIOS : GSPSIZ
스프라이트 크기를 획득.
입력 / 없음 BIOS에서 사용 / AF 출력 / A = 크기 C 프랙 16 * 16의 경우 1

0105 : SUB : BIOS : GETPAT
문자 패턴을 얻는다.
입력 / A = 문자 코드 출력 / (FC40H)에 패턴 BIOS에서 사용 / ALL 

0109 : SUB : BIOS : WRTVRM
A를 VRAM (HL)에 기록합니다.
입력 / A = 기록 내용 HL = 기록 VRAM 주소 출력 / 없음 BIOS에서 사용 / AF

010D : SUB : BIOS : RDVRM
A에 VRAM (HL)의 값을 읽는다.
입력 / HL =로드 VRAM 주소 출력 / A = 읽은 값. BIOS에서 사용 / AF

0111 : SUB : BIOS : CHGCLR
화면의 색을 바꾼다.
(F3E9H)에서 3 바이트, 전경, 배경, 주변 색상.

0115 : SUB : BIOS : CLS
화면 지우기
입력 /없이 출력 / 없음 BIOS에서 사용 / ALL

011D : SUB : BIOS : DSPFNK
기능 키의 표시
입력 /없이 출력 / 없음 BIOS에서 사용 / ALL

012D : SUB : BIOS : WRTVDP
VDP 레지스터 C 데이터 B를 쓴다.
입력 / C = 기록 VDP 레지스터 번호 B = 기록 데이터 출력 / 없음 BIOS에서 사용 / AF, BC

0131 : SUB : BIOS : VDPSTA
VDP 레지스터 A를 A로 읽는다. (미리 메모리에 써있는 값을 반환)
입력 / A =로드 레지스터 번호 출력 / A = 읽은 값 BIOS에서 사용 / F

013D : SUB : BIOS : SETPAG
페이지 전환.
(FAF5H)에 디스플레이 페이지 번호 (FAF6H) 활성 페이지

0141 : SUB : BIOS : INIPLT
팔레트를 초기화합니다.
입력 /없이 출력 / 없음 BIOS에서 사용 / AF, BC, DE

0145 : SUB : BIOS : RSTPLT
팔레트를 VRAM에서 복원한다. BASIC의 COLOR = RESTORE. 메모리의 값으로 초기화한다.
입력 /없이 출력 / 없음 BIOS에서 사용 / AF, BC, DE

0149 : SUB : BIOS : GETPLT
팔레트에서 색상 코드를 얻는다.
입력 / B에 4bit = 빨간색 (B) 아래 4bit = 파랑 C 아래 4bit = 녹색

014D : SUB : BIOS : SETPLT
팔레트 설정.
입력 / D = 팔레트 코드 A에 4bit = 빨간색 A 아래 4bit = 파랑 E 아래 4bit = 녹색

017D : SUB : BIOS : BEEP
BEEP 음을 울린다.
입력 /없이 출력 / 없음 BIOS에서 사용 / ALL

0181 : SUB : BIOS : PROMPT
프롬프트.
입력 /없이 출력 / 없음 BIOS에서 사용 / ALL

01AD : SUB : BIOS : NEWPAD
마우스, 라이트 펜의 상태를 읽는다.
입력 / A = 설정 출력 / A = 값 BIOS에서 사용 / ALL

01B5 : SUB : BIOS : CHGMDP
VDP의 모드를 A로 바꾼다. 팔레트는 초기화된다.
입력 / A = 모드 출력 / 없음 BIOS에서 사용 / ALL

01BD : SUB : BIOS : KNJPRT
그래픽 화면에 한자를 출력한다. (단, MSX2에서는 제 1 수준 만 지원)
입력 / BC = JIS 코드 A = 표시 모드 (논리 연산) 출력 / 없음 BIOS에서 사용 / AF

01F5 : SUB : BIOS : REDCLK
시계 데이터를 읽는다.
입력 / C = 클럭 RAM 주소 출력 / A = 읽은 데이터 BIOS에서 사용 / F         

01F9 : SUB : BIOS : WRTCLK
클럭 데이터를 기록한다.
입력 / A = 쓰기 데이터 C = 클럭 주소 출력 / 없음 BIOS에서 사용 / F    

[주요 데이터
002D : MAIN : DATA : ROMID
MSX 버전 번호
0 : MSX1 1 : MSX2 2 : MSX2 + 3 : MSX Turbo-R 4 - : ???

002B : MAIN : DATA :
ID 바이트
문자 발생기의 종류, 날짜 형식, 인터럽트주기 등의 정보.

002C : MAIN : DATA :
ID 바이트
키보드의 종별, PRINT USING 등의 정보.

0006 : MAIN : DATA :
VDP (Read)의 포트 0의 주소.

0007 : MAIN : DATA :
VDP (Write) 포트 0의 주소.

[작업 영역]
F380 : RAM : WORK : RDPRIM
기본 슬롯에서로드 루틴. (5)
F385 : RAM : WORK : WRPRIM
기본 슬롯에 쓰기 루틴. (7)
F38C : RAM : WORK : CLPRIM
기본 슬롯 콜 루틴. (14)
F39A : RAM : WORK : USRTAB
USR 함수의 기계어 프로그램의 시작 번지. 정의 전에 오류 루틴을 가리킨다. (2 * 10)
F3AE : RAM : WORK : LINL40
Screen 0시의 1 행의 폭. Screen 0 일 때의 Width 문으로 설정한다.
(이 설정 한 화면 모드 전환 할) [40] (1)
F3AF : RAM : WORK : LINL32
Screen 1 때 한 줄의 폭. Screen 1 시간의 Width 문으로 설정한다. [40] (1)
F3B0 : RAM : WORK : LINLEN
현재 화면의 한 줄의 폭. [29] (1)
F3B1 : RAM : WORK : CRTCNT
현재 화면의 행수. (VDP 192 / 212Line 전환과 함께 사용하면 좋다) [24] (1)
F3B2 : RAM : WORK : CLMLST
PRINT 명령에두고 각 항목을 쉼표로 구분되어 있으면 옆 위치. [14] (1)
F3B3 : RAM : WORK : TXTNAM
SCREEN0 때의 패턴 이름 테이블 선두 어드레스 [0000H] (2)
F3B5 : RAM : WORK : TXTCOL
사용하지 않는다. (2)
F3B7 : RAM : WORK : TXTCGP
SCREEN0 때의 패턴 생성기 테이블 선두 어드레스 [0800H] (2)
F3B9 : RAM : WORK : TXTATR
사용하지 않는 (2)
F3BB : RAM : WORK : TXTPAT
사용하지 않는다. (2)
F3BD : RAM : WORK : T32NAM
SCREEN1 때의 패턴 이름 테이블의 시작 주소. [1800H] (2)
F3BF : RAM : WORK : T32COL
SCREEN1 때의 컬러 테이블 선두 어드레스 [2000H] (2)
F3C1 : RAM : WORK : T32CGP
SCREEN1 때의 패턴 생성기 테이블 선두 어드레스 [0000H] (2)
F3C3 : RAM : WORK : T32ATR
SCREEN1 때의 스프라이트 속성 테이블 선두 어드레스 [1B00H (2)
F3C5 : RAM : WORK : T32PAT
SCREEN1 때의 스프라이트 발전기 테이블 선두 어드레스 [3800H] (2)
F3C7 : RAM : WORK : GRPNAM
SCREEN2 때의 패턴 이름 테이블 선두 어드레스 [1800H] (2)
F3C9 : RAM : WORK : GRPCOL
SCREEN2 때의 컬러 테이블 선두 어드레스 [2000H] (2)
F3CB : RAM : WORK : GRPCGP
SCREEN2 때의 패턴 생성기 테이블 선두 어드레스 [0000H] (2)
F3CD : RAM : WORK : GRPATR
SCREEN2 때의 스프라이트 속성 테이블 선두 어드레스 [1B00H (2)
F3CF : RAM : WORK : GRPPAT
SCREEN2 때의 스프라이트 패턴 제 터미네이터 테이블 선두 어드레스 [3800H] (2)
F3D1 : RAM : WORK : MLTNAM
SCREEN3 때의 패턴 이름 테이블 선두 어드레스 [0800H] (2)
F3D3 : RAM : WORK :
사용하지 않는다. (2)
F3D5 : RAM : WORK : MLTCGP
SCREEN3 때의 패턴 생성기 테이블 선두 어드레스 [0000H] (2)
F3D7 : RAM : WORK : MLTATR
SCREEN3 때의 스프라이트 속성 테이블 선두 어드레스 [1B00H (2)
F3D9 : RAM : WORK : MLTPAT
SCREEN3 때의 스프라이트 발전기 테이블 선두 어드레스 [3800H] (2)
F3DB : RAM : WORK : CLIKSW
키 클릭 스위치 (키를 누를 때 소리가 나올지 여부).
SCREEN 문장의 <키 클릭 스위치>에 따라 설정. [1] (1)
F3DC : RAM : WORK : CSRY
커서의 Y 좌표 (1 ~) [1] (1)
F3DD : RAM : WORK : CSRX
커서의 X 좌표 (1 ~) [1] (1)
F3DE : RAM : WORK : CNSDFG
기능 키 표시 스위치. 0 이외라면 표시한다. [FFH] (1)
F3DF : RAM : WORK : RG0SAV
VDP 레지스터 0의 위치. [0] (1)
F3E0 : RAM : WORK : RG1SAV
VDP 레지스터 1의 위치 [E0H] (1)
F3E1 : RAM : WORK : RG2SAV
VDP 레지스터 2의 위치 [0] (1)
F3E2 : RAM : WORK : RG3SAV
VDP 레지스터 3의 위치 [0] (1)
F3E3 : RAM : WORK : RG4SAV
VDP 레지스터 4의 위치 [0] (1)
F3E4 : RAM : WORK : RG5SAV
VDP 레지스터 5의 위치 [0] (1)
F3E5 : RAM : WORK : RG6SAV
VDP 레지스터 6의 위치 [0] (1)
F3E6 : RAM : WORK : RG7SAV
VDP 레지스터 7의 위치 [0] (1)
F3E7 : RAM : WORK : STATFL
VDP의 상태의 저장 장소. MSX2 이상은 상태 레지스터 0의 내용 [0] (1)
F3E8 : RAM : WORK : TRGFLG
조이스틱의 트리거 버튼의 상태를 저장한다. (0 : Hit 1 : Not)
(Bit0 : Space Bit4 : Port1-A Bit5 : Port1-B Bit6 : Port2-A Bit7 : Port2-B) [FFH] (1)
F3E9 : RAM : WORK : FORCLR
전경. COLOR 문으로 구성된다. [15] (1)
F3EA : RAM : WORK : BAKCLR
배경색입니다. COLOR 문으로 구성된다. [4] (1)
F3EB : RAM : WORK : BDRCLR
주변 색상. COLOR 문으로 구성된다. [7] (1)
F3EC : RAM : WORK : MAXUPD
CIRCLE 문장이 내부적으로 사용한다. [JP 0000H / C3 00 00 (3)
F3EF : RAM : WORK : MINUPD
CIRCLE 문장이 내부적으로 사용한다. [JP 0000H / C3 00 00 (3)
F3F2 : RAM : WORK : ATRBYT
그래픽 사용시의 컬러 코드. [15] (1)
F3F3 : RAM : WORK : QUEUES
PLAY 문 실행시 큐 테이블을 가리킨다. [F959H (2)
F3F5 : RAM : WORK : FRCNEW
BASIC 인터프리터가 내부적으로 사용한다. [255] (1)
F3F6 : RAM : WORK : SCNCNT
키 스캔 시간 간격. [1] (1)
F3F7 : RAM : WORK : REPCNT
키 자동 반복이 시작될 때까지의 시간. [50] (1)
F3F8 : RAM : WORK : PUTPNT
키 버퍼 쓰기를 할 번지를 가리킨다. [FBF0H] (2)
F3FA : RAM : WORK : GETPNT
키 버퍼에서 읽어들이는 번지를 가리킨다. [FBF0H] (2)
F3FC : RAM : WORK : CS120
카세트 테이프 용 매개 변수 (5 * 2)
F406 : RAM : WORK : LOW
카세트 테이프의 데이터 (2)
F408 : RAM : WORK : HIGH
카세트 테이프의 데이터 (2)
F40A : RAM : WORK : HEADER
카세트 테이프의 데이터 (1)
F40B : RAM : WORK : ASPCT1
256 / 화면 비율. CIRCLE 문장에서 사용하기 위해 SCREEN 문장으로 구성된다. (2)
F40D : RAM : WORK : ASPCT2
256 * 화면 비율. CIRCLE 문장에서 사용하기 위해 SCREEN 문장으로 구성된다. (2)
F40F : RAM : WORK : ENDPGM
RESUME NEXT 문을 위해 임시 프로그램의 끝 [ ":"(5)
F414 : RAM : WORK : ERRFLG
오류 번호를 저장하는 영역 (1)
F415 : RAM : WORK : LPTPOS
프린터의 헤드 위치 [0] (1)
F416 : RAM : WORK : PRTFLG
프린터로 출력 여부 플래그 (1)
F417 : RAM : WORK : NTMSXP
프린터 종류. 0 = MSX 프린터 0 이외 = MSX 프린터가 아니다. (1)
F418 : RAM : WORK : RAWPRT
raw-mode에서 인쇄 중이라면 0 이외를 쓴다. 한자 모드에서 프린터 제어 코드를
출력 할 때와 비트 이미지를 출력 할 때 0이 아닌을 쓴다. (1)
F419 : RAM : WORK : VLZADR
VAL 함수에서 대체 문자의 주소. (2)
F41B : RAM : WORK : VLZDAT
VAL 함수에서 0으로 대체 문자 (1)
F41C : RAM : WORK : CURLIN
BASIC이 실행중인 행 번호 (2)
F41F : RAM : WORK : KBUF
위기 버퍼. (F55EH)에서 중간 언어로 치유되어 들어간다. (318)
F55D : RAM : WORK : BUFMIN
INPUT 문으로 사용된다. [ ","] (1)
F55E : RAM : WORK : BUF
입력 한 문자가 입력 버퍼. 직접 문을 아스키 코드로 들어간다.
BASIC 여기에 값이 저장되는 것을 기대하고 있지 않기 때문에 기계어 프로그램이 일시적으로
사용해도 상관 없다. (258)
F660 : RAM : WORK : ENDBUF
BUF (F55E)가 오버 플로우를 방지 플래그. (1)
F661 : RAM : WORK : TTYPOS
BASIC 내부에있는 가상 커서 위치. (1)
F662 : RAM : WORK : DIMFLG
BASIC이 내부적으로 사용한다. (1)
F663 : RAM : WORK : VALTYP
변수 유형을 식별하는 데 사용한다. (1)
F664 : RAM : WORK : OPRTYP
저장되는 단어가 경색 수 있는지를 보여준다. (1)
F665 : RAM : WORK : DONUM
위기의 플래그. (1)
F666 : RAM : WORK : CONTXT
CHRGET에서 사용할 텍스트 주소를 저장합니다. (2)
F668 : RAM : WORK : CONSAV
CHRGET가 불린 후 상수의 토큰을 저장한다. (1)
F669 : RAM : WORK : CONTYP
저장된 상수의 타입. (1)
F66A : RAM : WORK : CONLO
저장된 상수 값. (8)
F672 : RAM : WORK : MEMSIZ
BASIC에서 사용하는 메모리의 최상위 번지. (2)
F674 : RAM : WORK : STKTOP
BASIC 스택으로 사용하는 주소입니다. CLEAR 문장에 의해 변화한다. (2)
F676 : RAM : WORK : TXTTAB
BASIC 텍스트 영역의 시작 번지. (2)
F678 : RAM : WORK : TEMPPT
임시 기술자의 빈 영역의 시작 번지. [F67AH] (2)
F67A : RAM : WORK : TEMPST
NUMTEMP위한 공간. (3 * NUMTMP)
F698 : RAM : WORK : DSCTMP
문자열 함수의 응답 문자열 기술자가 들어간다. (3)
F69B : RAM : WORK : FRETOP
문자열 영역의 빈 영역의 시작 번지. (2)
F69D : RAM : WORK : TEMP3
가비지 컬렉션과 USR 함수 등에 사용된다. (2)
F69F : RAM : WORK : TEMP8
가비지 콜렉션 (2)
F6A1 : RAM : WORK : ENDFOR
FOR 문 다음의 주소를 저장한다. (2)
F6A3 : RAM : WORK : DATLIN
READ 문을 실행하여 읽힌 DATA 문장의 행 번호. (2)
F6A5 : RAM : WORK : SUBFLG
USR 함수 등으로 배열을 사용할 때의 플래그. (1)
F6A6 : RAM : WORK : USFLG
INPUT이나 READ에서 사용되는 플래그. (1)
F6A7 : RAM : WORK : TEMP
문 코드에 대한 임시 저장 장소.
변수 포인터 텍스트 주소 등에 사용. (2)
F6A9 : RAM : WORK : ptrflg
포인터로 변환하는 행 번호가 없으면 0, 있으면 0이 아닌. (1)
F6AA : RAM : WORK : AUTFLG
AUTO 명령 유효 · 무효 플래그. (0이 아닌 = 사용 중 0 = 무효 중) (1)
F6AB : RAM : WORK : AUTLIN
가장 최근에 입력 된 행 번호. (2)
F6AD : RAM : WORK : AUTINC
AUTO 명령 행 번호의 증가. [10] (2)
F6AF : RAM : WORK : SAVTXT
실행중인 텍스트의 주소를 저장하는 영역입니다. (2)
F6B1 : RAM : WORK : SAVSTK
스택을 저장하는 영역. (2)
F6B3 : RAM : WORK : ERRLIN
오류가 발생하면 행 번호. (2)
F6B5 : RAM : WORK : DOT
하등 가지 형태로 화면에 표시하거나 입력 된 최신의 행 번호. (2)
F6B7 : RAM : WORK : ERRTXT
오류가 발생 텍스트의 주소. (2)
F6B9 : RAM : WORK : ONELIN
오류가 발생했을 때의 비거리 대상 텍스트 주소. ON ERROR GOTO로 설정. (2)
F6BB : RAM : WORK : ONEFLG
오류 루틴의 실행을 나타내는 플래그. 0이 아닌 경우 실행 중입니다. (1)
F6BC : RAM : WORK : TEMP2
임시 저장 용. (2)
F6BE : RAM : WORK : OLDLIN
중단 된거나 최근에 실행 된 행 번호. (2)
F6C0 : RAM : WORK : OLDTXT
다음 실행 문장의 텍스트 주소. (2)
F6C2 : RAM : WORK : VARTAB
단순 변수의 시작 번지. NEW를 실행하면 (F676H) +2가 설정된다. (2)
F6C4 : RAM : WORK : ARYTAB
배열 테이블의 시작 주소입니다. (2)
F6C6 : RAM : WORK : STREND
텍스트 영역과 변수 영역으로 사용중인 메모리의 마지막 주소입니다. (2)
F6C8 : RAM : WORK : DATPTR
READ 문장의 실행에 읽힌 데이터의 텍스트 주소. (2)
F6CA : RAM : WORK : DEFTBL
영문자 1 자에 대해 변수의 형태를 유지하는 지역. (26)
F6E4 : RAM : WORK : PRMSTK
스택의 이전 정의 블록 (가비지 콜렉션) (2)
F6E6 : RAM : WORK : PRMLEN
처리 대상 테이블의 바이트 수. (2)
F6E8 : RAM : WORK : PARM1
처리 대상 매개 변수 정의 테이블. PRMSIZ 정의 블록 바이트 (PRMSIZ)
F74C : RAM : WORK : PRMPRV
이전 매개 변수 블록 포인터 (가비지 콜렉션) F6E4H] (2)
F74E : RAM : WORK : PRMLN2
파라미터 블록의 크기. (2)
F750 : RAM : WORK : PARM2
매개 변수 저장 용. (100)
F7B4 : RAM : WORK : PRMFLG
PARM1가 검색 여부를 나타내는 플래그. (1)
F7B5 : RAM : WORK : ARYTA2
검색의 끝. (2)
F7B7 : RAM : WORK : NOFUNS
처리 대상 함수가 없으면 0. (1)
F7B8 : RAM : WORK : TEMP9
가비지 컬렉션을위한 임시 저장 장소. (2)
F7BA : RAM : WORK : FUNACT
처리 대상 함수의 수입니다. (2)
F7BC : RAM : WORK : SWPTMP
SWAP 문장의 첫 번째 값의 임시 저장 장소. (8)
F7C4 : RAM : WORK : TRCFLG
추적 플래그. 0 이외 = TRACE ON 0 = TRACE OFF (1)
F7C5 : RAM : WORK : FBUFFR
마스 팩이 내부적으로 사용한다. (43)
F7F0 : RAM : WORK : DECTMP
10 진수 정수를 부동 소수점 숫자로 할 때 사용합니다. (2)
F7F2 : RAM : WORK : DECTM2
나누기 루틴을 수행 할 때 사용한다. (2)
F7F4 : RAM : WORK : DECCNT
나누기 루틴을 수행 할 때 사용한다. (2)
F7F6 : RAM : WORK : DAC
DAC. 연산의 대상이되는 값을 설정하는 영역입니다. (16)
F806 : RAM : WORK : HOLD8
10 진수의 곱셈을위한 레지스터 저장 영역입니다. (48)
F836 : RAM : WORK : HOLD2
마스 팩이 내부적으로 사용한다. (8)
F83E : RAM : WORK : HOLD1
마스 팩이 내부적으로 사용한다. (8)
F847 : RAM : WORK : ARG
DAC (F7F6H)와 연산 대상이되는 값을 설정하는 영역입니다. ARG. (16)
F857 : RAM : WORK : RNDX
최신 난수를 배정 밀도 부동 소수점으로 저장한다. RND 함수로 설정된다. (8)
F85F : RAM : WORK : MAXFIL
파일 번호의 최대 값. MAXFILES 문장으로 구성된다. (1)
F860 : RAM : WORK : FILTAB
파일 데이터 영역의 시작 번지. (2)
F862 : RAM : WORK : NULBUF
SAVE, LOAD에서 BASIC 인터프리터를 사용하는 버퍼. (2)
F864 : RAM : WORK : PTRFIL
액세스중인 파일의 데이터가있는 주소입니다. (2)
F866 : RAM : WORK : RUNFLG
프로그램을 LOAD 후 실행한다면 0이 아닌 값. (1)
F866 : RAM : WORK : FILNAM
파일 이름의 저장 영역입니다. (11)
F871 : RAM : WORK : FILNM2
파일 이름의 저장 영역입니다.
F87C : RAM : WORK : NLONLY
프로그램로드는 0이 아닌 값이된다. (1)
F87D : RAM : WORK : SAVEND
세이브 기계어 프로그램의 마지막 주소입니다. (2)
F87F : RAM : WORK : FNKSTR
기능 키의 문자열 저장 영역입니다. (16 자 * 10)
F91F : RAM : WORK : CGPNT
ROM의 문자 폰트 저장 슬롯 번호 (1)
F920 : RAM : WORK :
ROM의 문자 폰트 저장 주소. (2)
F922 : RAM : WORK : NAMBAS
현재의 패턴 이름 테이블의베이스 주소. (2)
F924 : RAM : WORK : CGPBAS
현재의 패턴 생성기 테이블의베이스 주소. (2)
F926 : RAM : WORK : PATBAS
현재 스프라이트 발전기 테이블의베이스 주소. (2)
F928 : RAM : WORK : ATRBAS
현재 스프라이트 속성 테이블의 기본 주소. (2)
F92A : RAM : WORK : CLOC
그래픽 루틴 내부에서 사용한다. (2)
F92C : RAM : WORK : CMASK
그래픽 루틴 내부에서 사용한다. (1)
F92D : RAM : WORK : MINDEL
그래픽 루틴 내부에서 사용한다. (2)
F92F : RAM : WORK : MAXDEL
그래픽 루틴 내부에서 사용한다. (2)
F931 : RAM : WORK : ASPECT
CIRCLE 문장의 작업 영역 비율
F933 : RAM : WORK : CENCNT
CIRCLE 문장의 작업 영역 End count
F935 : RAM : WORK : CLINEF
CIRCLE 문장의 작업 영역 Flag to draw line to centre
F936 : RAM : WORK : CNPNTS
CIRCLE 문장의 작업 영역 점을 치는 좌표
F938 : RAM : WORK : CPLOTF
CIRCLE 문장의 작업 영역 Plot polarity flag
F939 : RAM : WORK : CPCNT
CIRCLE 문장의 작업 영역 1/8 of number of points in circle
F93B : RAM : WORK : CPCNT8
CIRCLE 문장의 작업 영역 
F93D : RAM : WORK : CRCSUM
CIRCLE 문장의 작업 영역 
F93F : RAM : WORK : CSTCNT
CIRCLE 문장의 작업 영역 
F941 : RAM : WORK : CSCLXY
CIRCLE 문장의 작업 영역 X, Y 방향의 축소 비율
F942 : RAM : WORK : CSAVEA
CIRCLE 문장의 작업 영역 reservation area of ​​ADVGRP
F944 : RAM : WORK : CSAVEM
CIRCLE 문장의 작업 영역 reservation area of ​​ADVGRP
F945 : RAM : WORK : CXOFF
CIRCLE 문장의 작업 영역 X 방향의 중심에서 오프셋
F947 : RAM : WORK : CYOFF
CIRCLE 문장의 작업 영역 Y 방향의 중심에서 오프셋
F949 : RAM : WORK : LOHMSK
PAINT 문장의 작업 영역
F94A : RAM : WORK : LOHDIR
PAINT 문장의 작업 영역
F94B : RAM : WORK : LOHADR
PAINT 문장의 작업 영역
F94D : RAM : WORK : LOHCNT
PAINT 문장의 작업 영역
F94F : RAM : WORK : SKPCNT
PAINT 문장의 작업 영역 Skip count
F951 : RAM : WORK : MOVCNT
PAINT 문장의 작업 영역 Movement count
F953 : RAM : WORK : PDIREC
PAINT 문장의 작업 영역 페인트 방향
F954 : RAM : WORK : LFPROG
PAINT 문장의 작업 영역
F955 : RAM : WORK : RTPROG
PAINT 문장의 작업 영역
F956 : RAM : WORK : MCLTAB
PLAY 매크로 또는 DRAW 매크로 테이블의 선두를 가리킨다. (2)
F958 : RAM : WORK : MCLFLG
PLAY / DRAW 지시. (1)
F959 : RAM : WORK : QUETAB
큐 테이블. (24)
F971 : RAM : WORK : QUEBAK
BCKQ에서 사용한다. (4)
F975 : RAM : WORK : VOICAQ
음성 1의 큐. (128)
F9F5 : RAM : WORK : VOICBQ
음성 2의 큐. (128)
FA75 : RAM : WORK : VOICCQ
음성 3 큐. (128)
FAF5 : RAM : WORK : DPPAGE
디스플레이 페이지 번호 (1)
FAF6 : RAM : WORK : ACPAGE
현재 페이지 번호 (1)
FAF7 : RAM : WORK : AVCSAV
AV 컨트롤 포트의 저장. (1)
FAF8 : RAM : WORK : EXBRSA
SUB-ROM 슬롯 번호 (1)
FAF9 : RAM : WORK : CHRCNT
버퍼중인 캐릭터의 카운터. 로마자 일까 변환에 사용됩니다. (값은 0 <= n <= 2) (1)
FAFA : RAM : WORK : ROMA
버퍼 중의 캐릭터를 넣어 두는 영역입니다. 로마자 일까 변환에 사용됩니다. (1)
FAFC : RAM : WORK : MODE
로마자 일까 변환 모드 스위치와 VRAM 크기. (1)
Bit 7 : 0- 히라가나 1- 카타카나 (로마자 일까 변환)
Bit 6 : 제 2 수준 한자 ROM의 유무. 0- 없음 1- 있습니다 (2+)
Bit 5 : 0-screen 10,1-screen 11 (2+)
Bit 4 : 클리핑 0-하지 1-하기 (2+)
Bit 3 : SCREEN 0-3의 VRAM 주소를 마스크 0-하지 1-하기
Bit 2,1 : VRAM 용량 0,0-16K 0,1-64K 1,1-128K
Bit 0 : 로마자 일까 변환 0-하지 1-하기
FAFD : RAM : WORK : NORUSE
한자 드라이버가 사용됩니다. (1)
Bit 7 : 1- 그래픽, 문자 혼합 모드
Bit 6 : 1-SHIFT + 커서 의한 화면의 상하 스크롤
Bit 5,4 : 한자 드라이버 내부에서 사용
Bit 3-0 : VDP의 논리적 작업.
FAFE : RAM : WORK : XSAVE
X 좌표 저장, 라이트 펜 인터럽트 요구의 유무 등. (2)
FB00 : RAM : WORK : YSAVE
Y 좌표의 저장. (2)
FB02 : RAM : WORK : LOGOPR
논리 연산 코드 (1)
FB03 : RAM : WORK : RSTMP
FB03 : RAM : WORK : TOCNT
FB04 : RAM : WORK : RSFCB
FB06 : RAM : WORK : RSIQLN
FB07 : RAM : WORK : MEXBIH Hook
FB0C : RAM : WORK : OLDSTT Hook
FB12 : RAM : WORK : OLDINT Hook
FB17 : RAM : WORK : DEVNUM
FB18 : RAM : WORK : DATCNT Hook
FB1B : RAM : WORK : ERRORS
FB1C : RAM : WORK : FLAGS
FB1D : RAM : WORK : ESTBLS
FB1E : RAM : WORK : COMMSK
FB1F : RAM : WORK : LSTCOM
FB20 : RAM : WORK : LSTMOD
FB21 : RAM : WORK : DRVTBL
디스크 ROM 슬롯에 연결된 드라이브 수, 슬롯 주소 테이블. 2 * 4Byte (8)
FBB0 : RAM : WORK : ENSTOP
[SHIFT + CTRL + GRAPH + 가나 키에 의한 웜을 가능하게하는 플래그.
0이 아닌 - 가능 0- 불가 (1)
FBB1 : RAM : WORK : BASROM
BASIC 텍스트의 존재 위치를 나타낸다. 0 = RAM / 0 이외 = ROM에 (CTRL + STOP 불가) (1)
FBB2 : RAM : WORK : LINTTB
라인 터미널 테이블. 텍스트 화면의 각 행의 정보를 유지하는 지역. (24)
FBCA : RAM : WORK : FSTPOS
BIOS의 INLIN (B1H)에서 입력 한 행의 첫 번째 문자의 위치. (2)
FBCC : RAM : WORK : CODSAV
커서가 겹친 부분의 캐릭터를 저장하는 영역입니다. (1)
FBCD : RAM : WORK : FNKSWI
KEY ON시 어떤 기능 키가 표시되어 있는지를 나타낸다. (1)
FBCE : RAM : WORK : FNKFLG
기능 키 인터럽트 동작 상태를 나타낸다. (10)
FBD8 : RAM : WORK : ONGSBF
TRPTBL (FC4CH)에서 대기중인 이벤트가 발생했는지 여부 플래그. (1)
FBD9 : RAM : WORK : CLIKFL
키 클릭 플래그 (1)
FBDA : RAM : WORK : OLDKEY
키 매트릭스의 상태 (구) (11)
FBE5 : RAM : WORK : NEWKEY
키 매트릭스의 상태 (새로운) (11)
FBF0 : RAM : WORK : KEYBUF
키 코드 버퍼. (40)
FC18 : RAM : WORK : LINWRK
스크린 핸들러가 사용하는 임시 저장 장소. (40)
FC40 : RAM : WORK : PATWRK
패턴 컨버터가 사용하는 임시 저장 장소. (8)
FC48 : RAM : WORK : BOTTOM
구현 한 RAM의 시작 (하위) 번지. 일반적으로 8000H. (2)
FC4A : RAM : WORK : HIMEM
사용 가능한 메모리의 상위 번지. CLEAR 문장의 <메모리 제한>에서 설정. (2)
FC4C : RAM : WORK : TRPTBL
인터럽트 처리에 사용 트랩 테이블 (78)
FC9A : RAM : WORK : RTYCNT
BASIC이 내부적으로 사용한다. (1)
FC9B : RAM : WORK : INTFLG
CTRL-STOP를 눌렀을 경우 여기에 03H를 넣는 것으로, 정지한다.
04H를 넣으면 그냥 STOP 일시 정지된다. (1)
FC9C : RAM : WORK : PADY
패들 Y 좌표 (1)
FC9D : RAM : WORK : PADX
패들 X 좌표 (1)
FC9E : RAM : WORK : JIFFY
PLAY 문장이 내부에서 사용. BASIC 시스템 변수 TIME과 같은 값을 돌려 준다. (2)
FCA0 : RAM : WORK : INTVAL
인터벌 간격. ON INTERVAL GOSUB 문에 의해 설정된다. (2)
FCA2 : RAM : WORK : INTCNT
인터벌을위한 카운터. 타이머 인터럽트 카운트 다운된다. (2)
FCA4 : RAM : WORK : LOWLIM
FCA5 : RAM : WORK : WINWID
FCA6 : RAM : WORK : GRPHED
그래픽 문자를 낼 때의 플래그. (1)
FCA7 : RAM : WORK : ESCCNT
이스케이프 코드가오고 나서 무엇 번째 문자를 카운트하는 지역. (1)
FCA8 : RAM : WORK : INSFLG
인서트 모드 플래그
FCA9 : RAM : WORK : CSRSW
커서 표시의 유무. LOCATE 문 <커서 스위치>로 설정된다. (1)
FCAA : RAM : WORK : CSTYLE
커서의 형태 (1)
FCAB : RAM : WORK : CAPST
CAPS 키의 상태. 0 이외라면 CAPS ON (1)
FCAC : RAM : WORK : KANAST
카나키 상태. 0이 아닌 경우 ON (1)
FCAD : RAM : WORK : KANAMD
카나키의 배열 상태 0 = 50 음 배열 0 이외 = JIS 배열 (1)
FCAE : RAM : WORK : FLBMEM
BASIC 프로그램로드 중 0이 아닌 값 (1)
FCAF : RAM : WORK : SCRMOD
현재 화면 모드의 번호 (1)
FCB0 : RAM : WORK : OLDSCR
화면 모드 저장 영역 (1)
FCB1 : RAM : WORK : CASPRV
TurboR에서는 I / O 포트 A7H의 위치
FCB2 : RAM : WORK : BRDATR
PAINT 문장에서 사용하는 경계 색의 칼라 코드 (1)
FCB3 : RAM : WORK : GXPOS
X 좌표 (2)
FCB5 : RAM : WORK : GYPOS
Y 좌표 (2)
FCB7 : RAM : WORK : GRPACX
그래픽 어큐뮬레이터 (X 좌표) (2)
FCB9 : RAM : WORK : GRPACY
그래픽 어큐뮬레이터 (Y 좌표) (2)
FCBB : RAM : WORK : DRWFLG
DRAW 문장에서 사용하는 플래그 (1)
FCBC : RAM : WORK : DRWSCL
DRAW 배율 0 = 스케일링하지 0이 아닌 = 스케일링한다. (1)
FCBD : RAM : WORK : DRWANG
DRAW 할 때의 각도 (1)
FCBE : RAM : WORK : RUNBNF
BLOAD 중 BSAVE 중 어느 쪽도 아닌 중 하나를 나타내는 플래그 (1)
FCBF : RAM : WORK : SAVENT
BSAVE의 시작 번지 (2)
FCC1 : RAM : WORK : EXPTBL
확장 슬롯 용 플래그 테이블. 각 슬롯의 확장 여부 (4)
FCC1 : 슬롯 0-FCC4 : 슬롯 3 Bit 7 : 0- 확장되지 않는다. 1- 확장되고있다.
FCC1 : 메인 ROM 존재하는 슬롯 번호. 슬롯 관련 BIOS에서 사용할 수있다.
FCC5 : RAM : WORK : SLTTBL
각 확장 슬롯 레지스터의 현재 슬롯 선택 상황 (4)
FCC5 : 슬롯 0-FCC8 : 슬롯 3 Bit 1,0- 페이지 0의 슬롯 번호
Bit 3,2- 페이지 1의 슬롯 번호 Bit 5,4- 페이지 2의 슬롯 번호
Bit 7,6- 페이지 3의 슬롯 번호
FCC9 : RAM : WORK : SLTATR
각 슬롯 용으로 페이지 별 특성을 저장한다. (64)
Bit 7 : ROM 된 BASIC 텍스트가 있으면 1
Bit 6 : 확장 장치의 프로그램이 있으면 1
Bit 5 : CALL 명령 루틴이 있으면 1
FCC9 : 슬롯 0-0 페이지 0, FCCA : 슬롯 0-0 페이지 1 ... FD08 : 슬롯 3-3 페이지 3
FD09 : RAM : WORK : SLTWRK
각 슬롯 용으로 2 바이트 씩 특정 작업 영역을 확보한다. (128)
FD09 : 슬롯 0-0 페이지 0, FD0B : 슬롯 0-0 페이지 1 ... FD88 : 슬롯 3-3 페이지 3
FD89 : RAM : WORK : PROCNM
확장 문 확장 장치 (CALL 명령)의 이름이 들어간다. 마지막은 0 (16)
FD99 : RAM : WORK : DEVICE
카트리지 용 장비 식별하는 데 사용한다. (1)
FD9A : RAM : HOOK : H.KEYI
MSXIO 인터럽트 처리의 시작. RS-232C 등의 인터럽트 처리를 추가한다.
FD9F : RAM : HOOK : H.TIMI
MSXIO 타이머 인터럽트 처리. 타이머 인터럽트 처리를 추가한다.
FDA4 : RAM : HOOK : H.CHPU
MSXIO CHPUT (문자 표시)의 시작. 다른 콘솔 출력 장치를 연결한다.
문자 표시의 경우 통과하기 때문에, BIOS 008DH (GRPPNT) 근처를 잇는 것도 재미있다.
FDA9 : RAM : HOOK : H.DSPC
MSXIO DSPCSR (커서 표시)의 시작. 다른 콘솔 출력 장치를 연결한다.
FDAE : RAM : HOOK : H.ERAC
MSXIO ERACSR (커서 삭제) 노 시작. 다른 콘솔 출력 장치를 연결한다.
FDB3 : RAM : HOOK : H.DSPF
MSXIO DSPFNK (기능 키 표시)의 시작. 다른 콘솔 출력 장치를 연결한다.
FDB8 : RAM : HOOK : H.ERAF
MSXIO ERAFNK (기능 키 삭제)의 시작. 다른 콘솔 출력 장치를 연결한다.
FDBD : RAM : HOOK : H.TOTE
MSXIO TOTEXT (화면을 텍스트 모드로)의 시작. 다른 콘솔 출력 장치를 연결한다.
FDC2 : RAM : HOOK : H.CHGE
MSXIO CHGET (1 문자 꺼내)의 시작. 다른 콘솔 출력 장치를 연결한다.
FDC7 : RAM : HOOK : H.INIP
MSXIO INIPAT (문자 패턴 초기화)의 시작. 다른 문자 집합을 사용하기.
FDCC : RAM : HOOK : H.KEYC
MSXIO KEYCOD (키 코드 변환)의 시작. 다른 키 배치를 사용한다.
FDD1 : RAM : HOOK : H.NMI
MSXIO NMI 루틴 (Key Easy)의 시작. 다른 키 배치를 사용하기.
FDD6 : RAM : HOOK : H.NMI
MSXIO NMI (Non 마스 블루 Interrupt)의 시작. NMI 처리를한다.
FDDB : RAM : HOOK : H.PINL
MSXINL PINLIN (한 줄 입력)의 시작. 다른 콘솔 입력 장치를 사용 등등.
FDE0 : RAM : HOOK : H.QINL
MSXINL QINLIN ( "?"+ 1 줄 입력)의 시작. 다른 콘솔 입력 장치를 사용 등등.
FDE5 : RAM : HOOK : H.INLI
MSXINL INLIN (한 줄 입력)의 시작. 다른 콘솔 입력 장치를 사용 등등.
FDEA : RAM : HOOK : H.ONGO
MSXSTS INGOTOP (ON GOTO)의 시작. 다른 인터럽트 처리 장치를 사용하기.  
FDF4 : RAM : HOOK : H.SETS
MSXSTS SETS (세트 속성)의 시작. 디스크 장치를 연결한다.
FDEF : RAM : HOOK : H.DSKI
MSXSTS DSKO $ (디스크 출력)의 시작. 디스크 장치를 연결하기 위하여.
FDF9 : RAM : HOOK : H.NAME
MSXSTS NAME (이름 변경)의 시작. 디스크 장치를 연결한다.
FDFE : RAM : HOOK : H.KILL
MSXSTS KILL (파일 삭제)의 시작. 디스크 장치를 연결한다.
FE03 : RAM : HOOK : H.IPL
MSXSTS IPL (초기 프로그램로드)의 시작. 디스크 장치를 연결한다.
FE08 : RAM : HOOK : H.COPY
MSXSTS COPY (파일 복사)의 시작. 디스크 장치를 연결한다.
FE0D : RAM : HOOK : H.CMD
MSXSTS CMD (확장 명령)의 시작. 디스크 장치를 연결한다.
FE12 : RAM : HOOK : H.DSKF
MSXSTS DSKF (디스크 빈)의 시작. 디스크 장치를 연결한다.
FE17 : RAM : HOOK : H.DSKI
MSXSTS DSKI (디스크 입력)의 시작. 디스크 장치를 연결한다.
FE1C : RAM : HOOK : H.ATTR
MSXSTS ATTR $ (속성)의 시작. 디스크 장치를 연결한다.
FE21 : RAM : HOOK : H.LSET
MSXSTS LSET (왼쪽 정렬 대입)의 시작. 디스크 장치를 연결하기 위하여.
FE26 : RAM : HOOK : H.RSET
MSXSTS RSET (오른쪽 정렬 대입)의 시작. 디스크 장치를 연결한다.
FE2B : RAM : HOOK : H.FIEL
MSXSTS FIELD (필드)의 시작. 디스크 장치를 연결한다.
FE30 : RAM : HOOK : H.MKI $
MSXSTS MKI $ (정수 작성)의 시작. 디스크 장치를 연결한다.
FE35 : RAM : HOOK : H.MKS $
MSXSTS MKS $ (단정도 실수 작성)의 시작. 디스크 장치를 연결한다.
FE3A : RAM : HOOK : H.MKD $
MSXSTS MKD $ (실수 일 작성)의 시작. 디스크 장치를 연결하기 위하여.
FE3F : RAM : HOOK : H.CVI
MSXSTS CVI (정수 변환)의 시작. 디스크 장치를 연결한다.
FE44 : RAM : HOOK : H.CVS
MSXSTS CVS (단 정밀도 실수 변환)의 시작. 디스크 장치를 연결한다.
FE49 : RAM : HOOK : H.CVD
MSXSTS CVD (배정도 실수 변환)의 시작. 디스크 장치를 연결한다.
FE4E : RAM : HOOK : H.GETP
SPDSK GETPTR (파일 포인터 꺼내기) 디스크 장치를 연결한다.
FE53 : RAM : HOOK : H.SETF
SPCDSK SETFIL (파일 포인터 설정) 디스크 장치를 연결합니다.
FE58 : RAM : HOOK : H.NOFO
SPDSK NOFOR (OPEN 문에 FOR가없는) 디스크 장치를 연결한다.
FE5D : RAM : HOOK : H.NULO
SPCDSK NULOPN (빈 파일을 오픈) 디스크 장치를 연결합니다.
FE62 : RAM : HOOK : H.NTFL
SPCDSK NTFLO (파일 번호가 0이 아닌) 디스크 장치를 연결한다.
FE67 : RAM : HOOK : H.MERG
SPCDSK MERGE (프로그램 파일 병합) 디스크 장치를 연결한다.
FE6C : RAM : HOOK : H.SAVE
SPCDSK SAVE (저장) 디스크 장치를 연결한다.
FE71 : RAM : HOOK : H.BINS
SPCDSK BINSAV (기계어 세이브) 디스크 장치를 연결한다.
FE76 : RAM : HOOK : H.BINL
SPCDSK BINLOD (기계어로드) 디스크 장치를 연결한다.
FE7B : RAM : HOOK : H.FILE
SPCDSK FILES (파일 이름 표시) 디스크 장치를 연결합니다.
FE80 : RAM : HOOK : H.DGET
SPCDSK DGET (디스크 GET) 디스크 장치를 연결한다.
FE85 : RAM : HOOK : H.FILO
SPCDSK FILOUT (파일 출력) 디스크 장치를 연결합니다.
FE8A : RAM : HOOK : H.INDS
SPCDSK INDSKC (디스크의 속성을 입력) 디스크 장치를 연결합니다.
FE8F : RAM : HOOK : H.RSLF
SPCDSK 전에 드라이브를 다시 선택한다. 디스크 장치를 연결하기 위하여.
FE94 : RAM : HOOK : H.SAVD
SPCDSK 현재 선택된 드라이브를 저장합니다. 디스크 장치를 연결한다.
FE99 : RAM : HOOK : H.LOC
SPCDSK LOC 함수 (장소를 나타내는) 디스크 장치를 연결한다.
FE9E : RAM : HOOK : H.LOF
SPCDSK LOF 함수 (파일의 길이) 디스크 장치를 연결합니다.
FEA3 : RAM : HOOK : H.EOF
SPCDSK EOF 함수 (파일의 끝) 디스크 장치를 연결한다.
FEA8 : RAM : HOOK : H.FPOS
SPCDSK FPOS 함수 (파일 위치) 디스크 장치를 연결한다.
FEAD : RAM : HOOK : H.BAKU
SPCDSK BAKUPT (백업) 디스크 장치를 연결한다.
FEB2 : RAM : HOOK : H.PARD
SPCDEV PARDEV (장치 이름 꺼내기) 논리적 장치 이름을 확장한다.
FEB7 : RAM : HOOK : H.NODE
SPCDEV NODEVN (장치 이름 없음) 생략 장치 이름을 다른 장치로 설정한다.
FEBC : RAM : HOOK : H.POSD
SPCDEV POSDSK 디스크 장치를 연결한다.
FEC1 : RAM : HOOK : H.DEVN
SPCDEV DEVNAM (장치 이름의 처리) 논리적 장치 이름을 확장한다.
FEC6 : RAM : HOOK : H.GEND
SPCDEV GENDSP (장치 할당) 논리적 장치 이름을 확장한다.
FECB : RAM : HOOK : H.RUNC
BIMISC RUNC (RUN위한 클리어)
FED0 : RAM : HOOK : H.CLEA
BIMISC CLEARC (CLEAR 문장위한 클리어)
FED5 : RAM : HOOK : H.LOPD
BIMISC LOPDFT (반복하게 생략 값 설정) 변수에 다른 옵션 값을 사용한다.
FEDA : RAM : HOOK : H.STKE
BIMISC STKERR (스택 오류)
FEDF : RAM : HOOK : H.ISFL
BIMISC ISFLIO (파일 입출력 여부)
FEE4 : RAM : HOOK : H.OUTD
BIO OUTDO (OUT을 실행)
FEE9 : RAM : HOOK : H.CRDO
BIO CRDO (CRLF를 실행)
FEEE : RAM : HOOK : H.DSKC
BIO DSKCHI (디스크의 속성을 입력)
FEF3 : RAM : HOOK : H.DOGR
GENGRP DOGRAPH (그래픽 처리를 실행)
FEF8 : RAM : HOOK : H.PRGE
BINTRP PRGEND (프로그램 종료)
FEFD : RAM : HOOK : H.ERRP
BINTRP ERRPRT (오류 표시)
FF02 : RAM : HOOK : HERRF
오류 처리기
FF07 : RAM : HOOK : HREAD
메인 루프 "OK"
FF0C : RAM : HOOK : HMAIN
메인 루프
FF11 : RAM : HOOK : H, DIRD
BINTRP DIRDO (직접 문 실행)
FF16 : RAM : HOOK : HFINI
메인 루프의 끝
FF1B : RAM : HOOK : HFINE
메인 루프의 끝
FF20 : RAM : HOOK : HCRUN
Tokenise
FF25 : RAM : HOOK : HCRUS
Tokenise
FF2A : RAM : HOOK : HISRE
Tokenise
FF2F : RAM : HOOK : HNTFN
Tokenise
FF34 : RAM : HOOK : HNOTR
Tokenise
FF39 : RAM : HOOK : HSNGF
FOR 문
FF3E : RAM : HOOK : HNEWS
Runloop 새로운 문
FF43 : RAM : HOOK : HGONE
Runloop 실행
FF48 : RAM : HOOK : HCNRG
CHRGTR 루틴
FF4D : RAM : HOOK : HRETU
RETURN 문
FF52 : RAM : HOOK : HPRTF
PRINT 문
FF57 : RAM : HOOK : HCOMP
PRINT 문
FF5C : RAM : HOOK : HFINP
PRINT 문
FF61 : RAM : HOOK : HTRMN
READ / INPUT 문장 오류
FF66 : RAM : HOOK : HFRME
기술 평가
FF6B : RAM : HOOK : HNTPL
기술 평가
FF70 : RAM : HOOK : HEVAL
인수 평가
FF75 : RAM : HOOK : HOKNO
인수 평가
FF75 : RAM : HOOK : H.OLNORN (H.MDIN)
(MSX-MIDI) MIDI IN 인터럽트
FF7A : RAM : HOOK : HFING
인수 평가
FF7F : RAM : HOOK : H.ISMI
BINTRP ISMID $ (MID $ 여부)
FF84 : RAM : HOOK : H.WIDT
BINTRP WIDTHS (WIDTH)
FF89 : RAM : HOOK : H.LIST
BINTRP LIST
FF8E : RAM : HOOK : H.BUFL
BINTRP BUFLIN (버퍼 라인)
FF93 : RAM : HOOK : H.FRQINT (H.MDTM)
(MSX-MIDI) 8253 타이머 인터럽트
FF98 : RAM : HOOK : HSCNE
행 번호에서 포인터로 변환
FF9D : RAM : HOOK : HFRET
기술자의 개방
FFA2 : RAM : HOOK : H.PTRG
BIPTRG PTRGET (포인터 제거) 옵션 값 이외의 변수를 사용합니다.
FFA7 : RAM : HOOK : H.PHYD
MSXIO PHYDIO (물리 디스크 입출력) 디스크 장치를 연결한다.
여기를 BIOS의 PHYDIO 마찬가지로 호출하는 것으로, 섹터 단위의 입출력이있다.
FFAC : RAM : HOOK : HFORM
디스크 포맷
FFB1 : RAM : HOOK : H.ERRO
BINTRP ERROR 응용 프로그램의 오류 처리
FFB6 : RAM : HOOK : H.LPTO
MSXIO LPTOUT (프린터 출력) 생략 값 이외의 프린터를 사용합니다. 
FFBB : RAM : HOOK : H.LPTS
MSXIO LPTSTT (프린터 상태) 옵션 값 이외의 프린터를 사용합니다. 
FFC0 : RAM : HOOK : H.SCRE
MSXSTS SCREEN 문 입구. SCREEN 문장을 확장한다.
FFC5 : RAM : HOOK : H.PLAY
MSXSTS PLAY 문 입구. PLAY 문장을 확장한다.
FFCA : RAM : HOOK : FCALL
확장 BIOS가 사용하는 훅
FFCF : RAM : HOOK : H.BGFD
DOS를 사용한다.
FFD4 : RAM : HOOK : H.ENFD
DOS를 사용한다.
FFE7 : RAM : WORK : RG8SAV
VDP 레지스터 8의 위치. (1)
FFE8 : RAM : WORK : RG9SAV
VDP 레지스터 9의 위치 (1)
FFE9 : RAM : WORK : RG10SA
VDP 레지스터 10의 위치 (1)
FFEA : RAM : WORK : RG11SA
VDP 레지스터 11의 위치 (1)
FFEB : RAM : WORK : RG12SA
VDP 레지스터 12의 위치 (1)
FFEC : RAM : WORK : RG13SA
VDP 레지스터 13의 위치 (1)
FFED : RAM : WORK : RG14SA
VDP 레지스터 14의 위치 (1)
FFEE : RAM : WORK : RG15SA
VDP 레지스터 15의 위치 (1)
FFEF : RAM : WORK : RG16SA
VDP 레지스터 16의 위치 (1)
FFF0 : RAM : WORK : RG17SA
VDP 레지스터 17의 위치 (1)
FFF1 : RAM : WORK : RG18SA
VDP 레지스터 18의 위치 (1)
FFF2 : RAM : WORK : RG19SA
VDP 레지스터 19의 위치 (1)
FFF3 : RAM : WORK : RG20SA
VDP 레지스터 20의 위치 (1)
FFF4 : RAM : WORK : RG21SA
VDP 레지스터 21의 위치 (1)
FFF5 : RAM : WORK : RG22SA
VDP 레지스터 22의 위치 (1)
FFF7 : RAM : WORK : RG23SA
VDP 레지스터 23의 위치 (1)

FFFA : RAM : WORK : RG25SA
VDP 레지스터 25의 위치 (2+) (1)
FFFB : RAM : WORK : RG26SA
VDP 레지스터 26의 위치 (2+) (1)
FFFC : RAM : WORK : RG27SA
VDP 레지스터 27의 위치 (2+) (1)
FFFF : RAM : WORK :
확장 슬롯 선택 레지스터.